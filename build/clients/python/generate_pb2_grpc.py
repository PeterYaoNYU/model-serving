# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generate_pb2 as generate__pb2


class TextGenerationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Info = channel.unary_unary(
                '/generate.v2.TextGenerationService/Info',
                request_serializer=generate__pb2.InfoRequest.SerializeToString,
                response_deserializer=generate__pb2.InfoResponse.FromString,
                )
        self.ServiceDiscovery = channel.unary_unary(
                '/generate.v2.TextGenerationService/ServiceDiscovery',
                request_serializer=generate__pb2.ServiceDiscoveryRequest.SerializeToString,
                response_deserializer=generate__pb2.ServiceDiscoveryResponse.FromString,
                )
        self.ClearCache = channel.unary_unary(
                '/generate.v2.TextGenerationService/ClearCache',
                request_serializer=generate__pb2.ClearCacheRequest.SerializeToString,
                response_deserializer=generate__pb2.ClearCacheResponse.FromString,
                )
        self.FilterBatch = channel.unary_unary(
                '/generate.v2.TextGenerationService/FilterBatch',
                request_serializer=generate__pb2.FilterBatchRequest.SerializeToString,
                response_deserializer=generate__pb2.FilterBatchResponse.FromString,
                )
        self.Warmup = channel.unary_unary(
                '/generate.v2.TextGenerationService/Warmup',
                request_serializer=generate__pb2.WarmupRequest.SerializeToString,
                response_deserializer=generate__pb2.WarmupResponse.FromString,
                )
        self.Prefill = channel.unary_unary(
                '/generate.v2.TextGenerationService/Prefill',
                request_serializer=generate__pb2.PrefillRequest.SerializeToString,
                response_deserializer=generate__pb2.PrefillResponse.FromString,
                )
        self.Decode = channel.unary_unary(
                '/generate.v2.TextGenerationService/Decode',
                request_serializer=generate__pb2.DecodeRequest.SerializeToString,
                response_deserializer=generate__pb2.DecodeResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/generate.v2.TextGenerationService/Health',
                request_serializer=generate__pb2.HealthRequest.SerializeToString,
                response_deserializer=generate__pb2.HealthResponse.FromString,
                )
        self.AdapterControl = channel.unary_unary(
                '/generate.v2.TextGenerationService/AdapterControl',
                request_serializer=generate__pb2.AdapterControlRequest.SerializeToString,
                response_deserializer=generate__pb2.AdapterControlResponse.FromString,
                )


class TextGenerationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Info(self, request, context):
        """/ Model Info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServiceDiscovery(self, request, context):
        """/ Service discovery
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearCache(self, request, context):
        """/ Empties batch cache
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FilterBatch(self, request, context):
        """/ Remove requests from a cached batch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Warmup(self, request, context):
        """/ Warmup the model and compute max cache size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prefill(self, request, context):
        """/ Prefill batch and decode first token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Decode(self, request, context):
        """/ Decode token for a list of prefilled batches
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """/ Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AdapterControl(self, request, context):
        """/ Model control
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextGenerationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=generate__pb2.InfoRequest.FromString,
                    response_serializer=generate__pb2.InfoResponse.SerializeToString,
            ),
            'ServiceDiscovery': grpc.unary_unary_rpc_method_handler(
                    servicer.ServiceDiscovery,
                    request_deserializer=generate__pb2.ServiceDiscoveryRequest.FromString,
                    response_serializer=generate__pb2.ServiceDiscoveryResponse.SerializeToString,
            ),
            'ClearCache': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearCache,
                    request_deserializer=generate__pb2.ClearCacheRequest.FromString,
                    response_serializer=generate__pb2.ClearCacheResponse.SerializeToString,
            ),
            'FilterBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.FilterBatch,
                    request_deserializer=generate__pb2.FilterBatchRequest.FromString,
                    response_serializer=generate__pb2.FilterBatchResponse.SerializeToString,
            ),
            'Warmup': grpc.unary_unary_rpc_method_handler(
                    servicer.Warmup,
                    request_deserializer=generate__pb2.WarmupRequest.FromString,
                    response_serializer=generate__pb2.WarmupResponse.SerializeToString,
            ),
            'Prefill': grpc.unary_unary_rpc_method_handler(
                    servicer.Prefill,
                    request_deserializer=generate__pb2.PrefillRequest.FromString,
                    response_serializer=generate__pb2.PrefillResponse.SerializeToString,
            ),
            'Decode': grpc.unary_unary_rpc_method_handler(
                    servicer.Decode,
                    request_deserializer=generate__pb2.DecodeRequest.FromString,
                    response_serializer=generate__pb2.DecodeResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=generate__pb2.HealthRequest.FromString,
                    response_serializer=generate__pb2.HealthResponse.SerializeToString,
            ),
            'AdapterControl': grpc.unary_unary_rpc_method_handler(
                    servicer.AdapterControl,
                    request_deserializer=generate__pb2.AdapterControlRequest.FromString,
                    response_serializer=generate__pb2.AdapterControlResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'generate.v2.TextGenerationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextGenerationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Info',
            generate__pb2.InfoRequest.SerializeToString,
            generate__pb2.InfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServiceDiscovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ServiceDiscovery',
            generate__pb2.ServiceDiscoveryRequest.SerializeToString,
            generate__pb2.ServiceDiscoveryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearCache(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/ClearCache',
            generate__pb2.ClearCacheRequest.SerializeToString,
            generate__pb2.ClearCacheResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FilterBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/FilterBatch',
            generate__pb2.FilterBatchRequest.SerializeToString,
            generate__pb2.FilterBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Warmup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Warmup',
            generate__pb2.WarmupRequest.SerializeToString,
            generate__pb2.WarmupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prefill(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Prefill',
            generate__pb2.PrefillRequest.SerializeToString,
            generate__pb2.PrefillResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Decode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Decode',
            generate__pb2.DecodeRequest.SerializeToString,
            generate__pb2.DecodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/Health',
            generate__pb2.HealthRequest.SerializeToString,
            generate__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AdapterControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/generate.v2.TextGenerationService/AdapterControl',
            generate__pb2.AdapterControlRequest.SerializeToString,
            generate__pb2.AdapterControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
